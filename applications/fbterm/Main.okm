MODULE FbTerm;
    IMPORT Kitsune, Fox32ROM;

    CONST TERMINAL_WIDTH = 80;
          TERMINAL_HEIGHT = 30;
          DEFAULT_FOREGROUND_COLOR = 7;
          DEFAULT_BACKGROUND_COLOR = 0;
          MAX_ESC_CODE_PARAMETERS = 8;
          COLORS = {
              0FF2E1E1EH, (* black *)
              0FFA88BF3H, (* red *)
              0FFA1E3A6H, (* green *)
              0FFAFE2F9H, (* yellow *)
              0FFFAB489H, (* blue *)
              0FFACA0EBH, (* magenta *)
              0FFD5E294H, (* cyan *)
              0FFF4D6CDH, (* white *)
              000000000H, (* transparent *)
          };

    VAR running: CHAR;
        shellProcessId: INT;
        shellIOStream: FileOrStream;

        (* 80x30 *)
        onScreenBufferPtr: POINTER TO ARRAY 2400 OF CHAR;
        onScreenColorBufferForegroundPtr: POINTER TO ARRAY 2400 OF CHAR;
        onScreenColorBufferBackgroundPtr: POINTER TO ARRAY 2400 OF CHAR;
        updateBufferPtr: POINTER TO ARRAY 2400 OF CHAR;
        updateColorBufferForegroundPtr: POINTER TO ARRAY 2400 OF CHAR;
        updateColorBufferBackgroundPtr: POINTER TO ARRAY 2400 OF CHAR;

        terminalX: INT;
        terminalY: INT;

        keyBuffer: CHAR;

    PROCEDURE Main(ioPtr: POINTER TO FileOrStream; argument: INT; table: POINTER TO POINTER TO CHAR;);
    VAR event: ARRAY 8 OF INT;
    BEGIN
        onScreenBufferPtr := Allocate(2400);
        onScreenColorBufferForegroundPtr := Allocate(2400);
        onScreenColorBufferBackgroundPtr := Allocate(2400);
        updateBufferPtr := Allocate(2400);
        updateColorBufferForegroundPtr := Allocate(2400);
        updateColorBufferBackgroundPtr := Allocate(2400);
        terminalX := 0;
        terminalY := 0;

        shellIOStream.fileSystemType := 1;
        shellIOStream.readCall := PTROF(GetKey);
        shellIOStream.writeCall := PTROF(PrintIncomingCharacter);

        running := 1;

        PrintString("FbTerm\n");

        shellProcessId := NewProcess("sh.fxf", PTROF(shellIOStream), 0, 0);
        IF shellProcessId = 0FFFFFFFFH THEN
            PrintString("could not start sh.fxf\n");
        ELSE
            PrintString("running sh.fxf\n");
        END;

        WHILE running DO
            GetNextEvent(PTROF(event));
            IF event[0] = PTROF(EVENT_TYPE_KEY_DOWN) THEN
                KeyDown(event[1]);
            ELSIF event[0] = PTROF(EVENT_TYPE_KEY_UP) THEN
                KeyUp(event[1]);
            END;

            YieldProcess();
        END;

        Free(onScreenBufferPtr);
        Free(onScreenColorBufferForegroundPtr);
        Free(onScreenColorBufferBackgroundPtr);
        Free(updateBufferPtr);
        Free(updateColorBufferForegroundPtr);
        Free(updateColorBufferBackgroundPtr);
    END;

    PROCEDURE GetKey(): CHAR;
    VAR temp: CHAR;
    BEGIN
        temp := keyBuffer;
        keyBuffer := 0;
        RETURN(temp);
    END;

    PROCEDURE KeyDown(key: CHAR;);
    BEGIN
        IF key = PTROF(KEY_CTRL) THEN
            RETURN();
        ELSIF (key = PTROF(KEY_LSHIFT)) OR (key = PTROF(KEY_RSHIFT)) THEN
            ShiftPressed();
        ELSIF key = PTROF(KEY_CAPS) THEN
            CapsPressed();
        ELSE
            keyBuffer := ScancodeToAscii(key);
        END;
    END;

    PROCEDURE KeyUp(key: CHAR;);
    BEGIN
        IF (key = PTROF(KEY_LSHIFT)) OR (key = PTROF(KEY_RSHIFT)) THEN
            ShiftReleased();
        END;
    END;

    PROCEDURE RedrawTerminal();
    VAR x: INT;
        y: INT;
        fg: INT;
        bg: INT;
        offset: INT;
        updateBufferWithOffset: CHAR;
        updateColorBufferForegroundWithOffset: CHAR;
        updateColorBufferBackgroundWithOffset: CHAR;
    BEGIN
        y := 0;
        WHILE y <| TERMINAL_HEIGHT DO
            x := 0;
            WHILE x <| TERMINAL_WIDTH DO
                offset := y *| TERMINAL_WIDTH + x;
                updateBufferWithOffset := GETCHAR(updateBufferPtr + offset);
                IF ((GETCHAR(onScreenBufferPtr + offset) # updateBufferWithOffset) OR
                    (GETCHAR(onScreenColorBufferForegroundPtr + offset) # GETCHAR(updateColorBufferForegroundPtr + offset)) OR
                    (GETCHAR(onScreenColorBufferBackgroundPtr + offset) # GETCHAR(updateColorBufferBackgroundPtr + offset)))
                THEN
                    updateColorBufferForegroundWithOffset := GETCHAR(updateColorBufferForegroundPtr + offset);
                    updateColorBufferBackgroundWithOffset := GETCHAR(updateColorBufferBackgroundPtr + offset);
                    fg := COLORS[updateColorBufferForegroundWithOffset];
                    bg := COLORS[updateColorBufferBackgroundWithOffset];
                    DrawFontTileToBackground(updateBufferWithOffset, x *| 8, y *| 16, fg, bg);
                    PUTCHAR(onScreenBufferPtr + offset, updateBufferWithOffset);
                    PUTCHAR(onScreenColorBufferForegroundPtr + offset, updateColorBufferForegroundWithOffset);
                    PUTCHAR(onScreenColorBufferBackgroundPtr + offset, updateColorBufferBackgroundWithOffset);
                END;
                x := x + 1;
            END;
            y := y + 1;
        END;
    END;

    PROCEDURE RedrawTerminalLine();
    VAR x: INT;
        y: INT;
        fg: INT;
        bg: INT;
        offset: INT;
        updateBufferWithOffset: CHAR;
        updateColorBufferForegroundWithOffset: CHAR;
        updateColorBufferBackgroundWithOffset: CHAR;
    BEGIN
        x := 0;
        y := terminalY;
        WHILE x <| TERMINAL_WIDTH DO
            offset := y *| TERMINAL_WIDTH + x;
            updateBufferWithOffset := GETCHAR(updateBufferPtr + offset);
            IF ((GETCHAR(onScreenBufferPtr + offset) # updateBufferWithOffset) OR
                (GETCHAR(onScreenColorBufferForegroundPtr + offset) # GETCHAR(updateColorBufferForegroundPtr + offset)) OR
                (GETCHAR(onScreenColorBufferBackgroundPtr + offset) # GETCHAR(updateColorBufferBackgroundPtr + offset)))
            THEN
                updateColorBufferForegroundWithOffset := GETCHAR(updateColorBufferForegroundPtr + offset);
                updateColorBufferBackgroundWithOffset := GETCHAR(updateColorBufferBackgroundPtr + offset);
                fg := COLORS[updateColorBufferForegroundWithOffset];
                bg := COLORS[updateColorBufferBackgroundWithOffset];
                DrawFontTileToBackground(updateBufferWithOffset, x *| 8, y *| 16, fg, bg);
                PUTCHAR(onScreenBufferPtr + offset, updateBufferWithOffset);
                PUTCHAR(onScreenColorBufferForegroundPtr + offset, updateColorBufferForegroundWithOffset);
                PUTCHAR(onScreenColorBufferBackgroundPtr + offset, updateColorBufferBackgroundWithOffset);
            END;
            x := x + 1;
        END;
    END;

    PROCEDURE PrintString(str: POINTER TO CHAR;);
    BEGIN
        WHILE str^ DO
            PrintCharacter(str^);
            str := str + 1;
        END;
    END;

    PROCEDURE PrintIncomingCharacter(ptr: POINTER TO CHAR;);
    BEGIN
        PrintCharacter(ptr^);
    END;

    PROCEDURE PrintCharacter(c: CHAR;);
    VAR offset: INT;
    BEGIN
        IF c = 0 THEN
            RETURN();
        ELSIF c = 8 THEN
            (* backspace *)
            IF terminalX >| 0 THEN
                terminalX := terminalX - 1;
            END;
        ELSIF c = 13 THEN
            (* carriage return *)
            RedrawTerminalLine();
            terminalY := 0;
        ELSIF c = 10 THEN
            (* line feed *)
            RedrawTerminalLine();
            terminalX := 0;
            terminalY := terminalY + 1;
            IF terminalY >|= TERMINAL_HEIGHT THEN
                ScrollTerminal();
            END;
        ELSIF c = 27 THEN
            (* TODO: escape codes *)
        ELSE
            IF terminalX >|= TERMINAL_WIDTH THEN
                RedrawTerminalLine();
                terminalX := 0;
                terminalY := terminalY + 1;
            END;

            IF terminalY >|= TERMINAL_HEIGHT THEN
                ScrollTerminal();
            END;

            offset := terminalY *| TERMINAL_WIDTH + terminalX;
            PUTCHAR(updateBufferPtr + offset, c);
            PUTCHAR(updateColorBufferForegroundPtr + offset, DEFAULT_FOREGROUND_COLOR);
            PUTCHAR(updateColorBufferBackgroundPtr + offset, DEFAULT_BACKGROUND_COLOR);
            terminalX := terminalX + 1;
        END;
    END;

    PROCEDURE ScrollTerminal();
    VAR i: INT;
        lastLineOffset: INT;
    BEGIN
        i := TERMINAL_WIDTH;
        WHILE i <| TERMINAL_WIDTH *| TERMINAL_HEIGHT DO
            CopyMemoryChar(onScreenBufferPtr + i, updateBufferPtr + i - TERMINAL_WIDTH, TERMINAL_WIDTH);
            CopyMemoryChar(onScreenColorBufferForegroundPtr + i, updateColorBufferForegroundPtr + i - TERMINAL_WIDTH, TERMINAL_WIDTH);
            CopyMemoryChar(onScreenColorBufferBackgroundPtr + i, updateColorBufferBackgroundPtr + i - TERMINAL_WIDTH, TERMINAL_WIDTH);
            i := i + TERMINAL_WIDTH;
        END;

        i := 0;
        lastLineOffset := TERMINAL_WIDTH *| (TERMINAL_HEIGHT - 1);
        WHILE i <| TERMINAL_WIDTH DO
            PUTCHAR(updateBufferPtr + lastLineOffset + i, 0);
            PUTCHAR(updateColorBufferForegroundPtr + lastLineOffset + i, 0);
            PUTCHAR(updateColorBufferBackgroundPtr + lastLineOffset + i, 0);
            i := i + 1;
        END;

        terminalY := TERMINAL_HEIGHT - 1;
        RedrawTerminal();
    END;
END.
